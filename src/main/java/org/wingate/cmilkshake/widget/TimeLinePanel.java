/*
 * Copyright (C) 2023 util2
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.wingate.cmilkshake.widget;

import java.util.ArrayList;
import java.util.List;
import org.wingate.cmilkshake.ass.Ass;
import org.wingate.cmilkshake.ass.AssLine;
import org.wingate.cmilkshake.util.Time;

/**
 *
 * @author util2
 */
public class TimeLinePanel extends javax.swing.JPanel {

    private final List<TimeLineRenderer> renderPanels = new ArrayList<>();
    private List<Ass> assSubtitles = new ArrayList<>();
    
    /**
     * Creates new form TimeLinePanel
     */
    public TimeLinePanel() {
        initComponents();
        panTimeLine.setLayout(null);
    }
    
    public void openScripts(List<Ass> assSubtitles){        
        this.assSubtitles = assSubtitles;        
        reoganize();
    }
    
    private void reoganize(){
        panTimeLine.removeAll();
        renderPanels.clear();
        for(Ass sub : assSubtitles){
            TimeLineRenderer render = new TimeLineRenderer();
            int count = 0;
            for(AssLine line : sub.getLines()){
                render.getEvents().add(TimeLineEvent.fromAssEvent(line, ++count));
            }
            renderPanels.add(render);
            panTimeLine.add(render);
            render.setLocation(0, (renderPanels.size() - 1) * render.getLineHeight());
            render.setSize(panTimeLine.getWidth(), render.getLineHeight());
        }
        
        long msMin = Long.MAX_VALUE, msMax = Long.MIN_VALUE;
        for(TimeLineRenderer render : renderPanels){
            for(TimeLineEvent event : render.getEvents()){
                long msStart = Time.toMillisecondsTime(event.getStart());
                long msEnd = Time.toMillisecondsTime(event.getEnd());
                msMin = Math.min(msMin, msStart);
                msMax = Math.max(msMax, msEnd);
            }
        }        
        sliderTimeLine.setMinimum((int)(msMin/1000L));
        sliderTimeLine.setMaximum((int)(msMax/1000L));
    }

    public List<TimeLineRenderer> getRenderPanels() {
        return renderPanels;
    }
    
    public void trySelectEvent(Time start, Time end){
        boolean hasSelection = false;
        lblStartEntry.setText(Time.create(0L).toASSTime());
        lblEndEntry.setText(Time.create(0L).toASSTime());
        lblDurationEntry.setText(Time.create(0L).toASSTime());
        long tStart = Time.toMillisecondsTime(start);
        long tEnd = Time.toMillisecondsTime(end);
        long msStart, msEnd;
        for(TimeLineRenderer render : renderPanels){
            for(TimeLineEvent event : render.getEvents()){
                event.setSelected(false);
                msStart = Time.toMillisecondsTime(event.getStart());
                msEnd = Time.toMillisecondsTime(event.getEnd());
                if(msStart <= tStart && tEnd <= msEnd){
                    event.setSelected(true);
                    hasSelection = true;
                }
            }
        }
        if(hasSelection == true){
            lblStartEntry.setText(start.toASSTime());
            lblEndEntry.setText(end.toASSTime());
            lblDurationEntry.setText(Time.substract(start, end).toASSTime());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sbVertical = new javax.swing.JScrollBar();
        panTimeLine = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnAddScript = new javax.swing.JButton();
        btnRemoveScript = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnValidChanges = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnNewScript = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btnCut = new javax.swing.JButton();
        btnCopy = new javax.swing.JButton();
        btnPaste = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblEndShow = new javax.swing.JLabel();
        lblDurationEntry = new javax.swing.JLabel();
        lblDurationShow = new javax.swing.JLabel();
        lblStartShow = new javax.swing.JLabel();
        lblEndEntry = new javax.swing.JLabel();
        lblStartEntry = new javax.swing.JLabel();
        btnZoomIn = new javax.swing.JButton();
        btnZoomOut = new javax.swing.JButton();
        sliderTimeLine = new javax.swing.JSlider();
        lblScaleShow = new javax.swing.JLabel();
        lblScaleEntry = new javax.swing.JLabel();

        javax.swing.GroupLayout panTimeLineLayout = new javax.swing.GroupLayout(panTimeLine);
        panTimeLine.setLayout(panTimeLineLayout);
        panTimeLineLayout.setHorizontalGroup(
            panTimeLineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panTimeLineLayout.setVerticalGroup(
            panTimeLineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jToolBar1.setRollover(true);

        btnAddScript.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cmlk/images/32px-Crystal_Clear_action_edit_add-blue.png"))); // NOI18N
        btnAddScript.setToolTipText("Open script(s)");
        btnAddScript.setFocusable(false);
        btnAddScript.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddScript.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnAddScript);

        btnRemoveScript.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cmlk/images/32px-Crystal_Clear_action_edit_remove.png"))); // NOI18N
        btnRemoveScript.setToolTipText("Close script(s)");
        btnRemoveScript.setFocusable(false);
        btnRemoveScript.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRemoveScript.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnRemoveScript);
        jToolBar1.add(jSeparator1);

        btnValidChanges.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cmlk/images/32px-Crystal_Clear_action_apply.png"))); // NOI18N
        btnValidChanges.setToolTipText("Save script(s)");
        btnValidChanges.setFocusable(false);
        btnValidChanges.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnValidChanges.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnValidChanges);
        jToolBar1.add(jSeparator2);

        btnNewScript.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cmlk/images/32px-Crystal_Clear_action_filenew.png"))); // NOI18N
        btnNewScript.setToolTipText("Create blank script");
        btnNewScript.setFocusable(false);
        btnNewScript.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNewScript.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnNewScript);
        jToolBar1.add(jSeparator3);

        btnCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cmlk/images/32px-Crystal_Clear_action_editcut.png"))); // NOI18N
        btnCut.setToolTipText("Cut");
        btnCut.setFocusable(false);
        btnCut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnCut);

        btnCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cmlk/images/32px-Crystal_Clear_action_editcopy.png"))); // NOI18N
        btnCopy.setToolTipText("Copy");
        btnCopy.setFocusable(false);
        btnCopy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCopy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnCopy);

        btnPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cmlk/images/32px-Crystal_Clear_action_editpaste.png"))); // NOI18N
        btnPaste.setToolTipText("Paste");
        btnPaste.setFocusable(false);
        btnPaste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPaste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnPaste);

        lblEndShow.setText("End :");

        lblDurationEntry.setText("0.00.00.000");

        lblDurationShow.setText("Duration :");

        lblStartShow.setText("Start :");

        lblEndEntry.setText("0.00.00.000");

        lblStartEntry.setText("0.00.00.000");

        btnZoomIn.setText("+");
        btnZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomInActionPerformed(evt);
            }
        });

        btnZoomOut.setText("-");
        btnZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomOutActionPerformed(evt);
            }
        });

        sliderTimeLine.setMaximum(10000);
        sliderTimeLine.setValue(0);
        sliderTimeLine.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderTimeLineStateChanged(evt);
            }
        });

        lblScaleShow.setText("Scale :");

        lblScaleEntry.setText("100%");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnZoomIn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnZoomOut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblScaleShow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblScaleEntry)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderTimeLine, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStartShow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStartEntry)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEndShow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEndEntry)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDurationShow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDurationEntry)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDurationEntry)
                    .addComponent(lblDurationShow)
                    .addComponent(lblEndEntry)
                    .addComponent(btnZoomIn)
                    .addComponent(btnZoomOut)
                    .addComponent(lblStartEntry)
                    .addComponent(lblEndShow)
                    .addComponent(lblStartShow)
                    .addComponent(sliderTimeLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblScaleShow)
                    .addComponent(lblScaleEntry))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panTimeLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sbVertical, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panTimeLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sbVertical, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sliderTimeLineStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTimeLineStateChanged
        // Slide for timeline
        for(TimeLineRenderer render : renderPanels){
            render.setMsOffset(-sliderTimeLine.getValue() * 1000);
        }
    }//GEN-LAST:event_sliderTimeLineStateChanged

    private void btnZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomInActionPerformed
        // Zoom in (horizontal)
        float value = 0f;
        for(TimeLineRenderer render : renderPanels){
            value = Math.min(render.getHorizontalZoom() + 0.1f, Float.MAX_VALUE);
            render.setHorizontalZoom(value);
        }
        lblScaleEntry.setText(Math.round(value * 100f) + "%");
    }//GEN-LAST:event_btnZoomInActionPerformed

    private void btnZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomOutActionPerformed
        // Zoom out (horizontal)
        float value = 0f;
        for(TimeLineRenderer render : renderPanels){
            value = Math.max(render.getHorizontalZoom() - 0.1f, 0.1f);
            render.setHorizontalZoom(value);
        }
        lblScaleEntry.setText(Math.round(value * 100f) + "%");
    }//GEN-LAST:event_btnZoomOutActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddScript;
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnCut;
    private javax.swing.JButton btnNewScript;
    private javax.swing.JButton btnPaste;
    private javax.swing.JButton btnRemoveScript;
    private javax.swing.JButton btnValidChanges;
    private javax.swing.JButton btnZoomIn;
    private javax.swing.JButton btnZoomOut;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblDurationEntry;
    private javax.swing.JLabel lblDurationShow;
    private javax.swing.JLabel lblEndEntry;
    private javax.swing.JLabel lblEndShow;
    private javax.swing.JLabel lblScaleEntry;
    private javax.swing.JLabel lblScaleShow;
    private javax.swing.JLabel lblStartEntry;
    private javax.swing.JLabel lblStartShow;
    private javax.swing.JPanel panTimeLine;
    private javax.swing.JScrollBar sbVertical;
    private javax.swing.JSlider sliderTimeLine;
    // End of variables declaration//GEN-END:variables
}
