/*
 * Copyright (C) 2020 util2
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.wingate.cmilkshake;

import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import javax.swing.JFileChooser;
import org.wingate.cmilkshake.ass.Ass;
import org.wingate.cmilkshake.compare.CompareCPLReport;
import org.wingate.cmilkshake.compare.CompareCPSReport;
import org.wingate.cmilkshake.compare.CompareTextReport;
import org.wingate.cmilkshake.compare.CompareTimeReport;
import org.wingate.cmilkshake.compare.Counter;
import org.wingate.cmilkshake.table.AssTableModel;

/**
 *
 * @author util2
 */
public class MainFrame extends javax.swing.JFrame {
    
    private AssTableModel tableModel_A,  tableModel_B;
    private final List<Ass> ass_list = new ArrayList<>();
    private CompareTextReport textReport = null;
    private CompareTimeReport timeReport = null;
    private CompareCPLReport cplReport = null;
    private CompareCPSReport cpsReport = null;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        init();
    }
    
    private void init(){
        setSize(1824, 1026);
        setLocationRelativeTo(null);
        
        jSplitPane1.setDividerLocation(912);
        
        // HACK
        jPanel1.setPreferredSize(new Dimension(10, 10));
    }
    
    private void reinitTable(Ass ass_A, Ass ass_B){
        if(ass_A != null){
            // Table A (origin)
            tableModel_A = new AssTableModel(assTable_A);
            assTable_A.setModel(tableModel_A);
            tableModel_A.add(ass_A);
            tableModel_A.updateColumnSize(assTable_A);
        }
        
        if(ass_B != null){
            // Table B (another)
            tableModel_B = new AssTableModel(assTable_B);
            assTable_B.setModel(tableModel_B);
            tableModel_B.add(ass_B);
            tableModel_B.updateColumnSize(assTable_B);
        }
        
        if(ass_A != null && ass_B != null){
            textReport = Counter.compareText(ass_A, ass_B);
            tableModel_A.applyTextReport(textReport);
            tableModel_B.applyTextReport(textReport);
            timeReport = Counter.compareTime(ass_A, ass_B);
            tableModel_B.applyTimeReport(timeReport);
            cplReport = Counter.compareCPL(ass_A, ass_B);
            tableModel_B.applyCplReport(cplReport);
            cpsReport = Counter.compareCPS(ass_A, ass_B);
            tableModel_B.applyCpsReport(cpsReport);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fcFiles = new javax.swing.JFileChooser();
        fcVideo = new javax.swing.JFileChooser();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        assTable_A = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        assTable_B = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuFileASS = new javax.swing.JMenuItem();
        mnuFileQuit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Caramel Milkshake 2.4.0 (cmilkshake) by TW2");

        assTable_A.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(assTable_A);

        jSplitPane1.setLeftComponent(jScrollPane1);

        assTable_B.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(assTable_B);

        jSplitPane1.setRightComponent(jScrollPane2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(10, 400));
        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jMenu1.setText("Fichier");

        mnuFileASS.setText("Ouvrir un ASS...");
        mnuFileASS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileASSActionPerformed(evt);
            }
        });
        jMenu1.add(mnuFileASS);

        mnuFileQuit.setText("Quitter");
        mnuFileQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileQuitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuFileQuit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuFileQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuFileQuitActionPerformed

    private void mnuFileASSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileASSActionPerformed
        for(javax.swing.filechooser.FileFilter ff : fcFiles.getChoosableFileFilters()){
            fcFiles.removeChoosableFileFilter(ff);
        }
        fcFiles.addChoosableFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File file) {
                return file.isDirectory() | file.getName().endsWith(".ass");
            }

            @Override
            public String getDescription() {
                return "ASS files";
            }
        });
        fcFiles.setMultiSelectionEnabled(true);        
        int z = fcFiles.showOpenDialog(this);        
        if(z == JFileChooser.APPROVE_OPTION){
            File[] files = fcFiles.getSelectedFiles();
            Arrays.sort(files, Comparator.comparingLong(File::lastModified));
            for(File file : files){                
                ass_list.add(Ass.read(file.getPath()));
            }
            if(ass_list.isEmpty() == false){
                if(ass_list.size() >= 2){                    
                    reinitTable(ass_list.get(0), ass_list.get(1));
                    
                    assTable_A.revalidate(); assTable_B.revalidate();
                    assTable_A.updateUI(); assTable_B.updateUI();
                }else{
                    reinitTable(ass_list.get(0), null);
                    
                    assTable_A.revalidate();
                    assTable_A.updateUI();
                }                
            }
        }
    }//GEN-LAST:event_mnuFileASSActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable assTable_A;
    private javax.swing.JTable assTable_B;
    private javax.swing.JFileChooser fcFiles;
    private javax.swing.JFileChooser fcVideo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem mnuFileASS;
    private javax.swing.JMenuItem mnuFileQuit;
    // End of variables declaration//GEN-END:variables
}
