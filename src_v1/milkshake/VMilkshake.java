/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package milkshake;

import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.filechooser.FileFilter;
import javax.swing.plaf.nimbus.NimbusLookAndFeel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import milkshake.ass.AssIO;
import milkshake.ass.AssInfos;
import milkshake.ass.AssNameCollection;
import milkshake.ass.AssStyleCollection;
import milkshake.ass.Time;
import milkshake.dialog.AnalyzeDialog;
import milkshake.filter.SubtitleFilter;
import milkshake.filter.VideoFilter;
import milkshake.lib.BarChart3D;
import milkshake.lib.LineChangeObject;
import milkshake.lib.PieChart3D;
import milkshake.lib.VLCj;
import milkshake.renderer.CompareRenderer;
import xrevolution.IO;
import xrevolution.Subtitle;

/**
 * VMilkshake -> VLCj Milkshake
 * @author The Wingate 2940
 */
public class VMilkshake extends javax.swing.JFrame {
    
    DefaultTableModel firstModel, secondModel;
    AssStyleCollection firstStyleCollection = new AssStyleCollection();    
    AssStyleCollection secondStyleCollection = new AssStyleCollection();
    AssInfos firstInfos = new AssInfos();
    AssInfos secondInfos = new AssInfos();
    AssNameCollection firstNameCollection = new AssNameCollection();
    AssNameCollection secondNameCollection = new AssNameCollection();
    CompareRenderer firstCR = new CompareRenderer();
    CompareRenderer secondCR = new CompareRenderer();
    VLCj vlc = new VLCj();
    List<Subtitle> firstSubList = new ArrayList<>();
    List<Subtitle> secondSubList = new ArrayList<>();
    StartFrame sf = new StartFrame();
    static JLabel lblCurrentTime = new JLabel();
    Map<String, Integer> firstchartmap = new HashMap<>();
    Map<String, Integer> secondchartmap = new HashMap<>();

    /**
     * Creates new form MyMilkshake
     */
    public VMilkshake() {
        sf.setLocationRelativeTo(null);
        sf.setVisible(true);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fcASS = new javax.swing.JFileChooser();
        bgStripItems = new javax.swing.ButtonGroup();
        jSplitPane3 = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        tbNormal = new javax.swing.JToggleButton();
        tbItems = new javax.swing.JToggleButton();
        tbStripped = new javax.swing.JToggleButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnChangeSentence = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        btnPlay = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jSlider1 = new javax.swing.JSlider();
        spAss = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        firstAssPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        firstTable = new javax.swing.JTable();
        firstDataPanel = new javax.swing.JPanel();
        spFirstData = new javax.swing.JSplitPane();
        firstFileInfoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfFirstTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        tfFirstAuthor = new javax.swing.JTextField();
        tfFirstTranslator = new javax.swing.JTextField();
        tfFirstEditor = new javax.swing.JTextField();
        tfFirstTimer = new javax.swing.JTextField();
        tfFirstChecker = new javax.swing.JTextField();
        tfFirstSynchPoint = new javax.swing.JTextField();
        tfFirstUpdateby = new javax.swing.JTextField();
        tfFirstUpdates = new javax.swing.JTextField();
        tfFirstCollisions = new javax.swing.JTextField();
        tfFirstResX = new javax.swing.JTextField();
        tfFirstResY = new javax.swing.JTextField();
        tfFirstPlayDepth = new javax.swing.JTextField();
        tfFirstSpeed = new javax.swing.JTextField();
        firstChartPanel = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        secondAssPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        secondTable = new javax.swing.JTable();
        secondDataPanel = new javax.swing.JPanel();
        spSecondData = new javax.swing.JSplitPane();
        secondFileInfoPanel = new javax.swing.JPanel();
        tfSecondChecker = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        tfSecondPlayDepth = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        tfSecondEditor = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        tfSecondTimer = new javax.swing.JTextField();
        tfSecondUpdates = new javax.swing.JTextField();
        tfSecondResY = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        tfSecondTranslator = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        tfSecondAuthor = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        tfSecondResX = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        tfSecondTitle = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        tfSecondSpeed = new javax.swing.JTextField();
        tfSecondSynchPoint = new javax.swing.JTextField();
        tfSecondCollisions = new javax.swing.JTextField();
        tfSecondUpdateBy = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        secondChartPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuFirstASS = new javax.swing.JMenuItem();
        mnuClearFirst = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuSecondASS = new javax.swing.JMenuItem();
        mnuClearSecond = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuVideo = new javax.swing.JMenuItem();
        mnuClearVideo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnuQuit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Caramel Milkshake - Hey boy, a milkshake please !");

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 805, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jSplitPane1.setTopComponent(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        bgStripItems.add(tbNormal);
        tbNormal.setForeground(new java.awt.Color(0, 204, 0));
        tbNormal.setSelected(true);
        tbNormal.setText("Text");
        tbNormal.setFocusable(false);
        tbNormal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbNormal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbNormalActionPerformed(evt);
            }
        });
        jToolBar1.add(tbNormal);

        bgStripItems.add(tbItems);
        tbItems.setForeground(new java.awt.Color(0, 204, 0));
        tbItems.setText("Items");
        tbItems.setFocusable(false);
        tbItems.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbItems.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbItemsActionPerformed(evt);
            }
        });
        jToolBar1.add(tbItems);

        bgStripItems.add(tbStripped);
        tbStripped.setForeground(new java.awt.Color(0, 204, 0));
        tbStripped.setText("Stripped");
        tbStripped.setFocusable(false);
        tbStripped.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbStripped.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbStripped.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbStrippedActionPerformed(evt);
            }
        });
        jToolBar1.add(tbStripped);
        jToolBar1.add(jSeparator4);

        btnChangeSentence.setForeground(new java.awt.Color(0, 0, 204));
        btnChangeSentence.setText("Analyze");
        btnChangeSentence.setFocusable(false);
        btnChangeSentence.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnChangeSentence.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnChangeSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeSentenceActionPerformed(evt);
            }
        });
        jToolBar1.add(btnChangeSentence);
        jToolBar1.add(jSeparator5);

        btnPlay.setForeground(new java.awt.Color(255, 0, 0));
        btnPlay.setText("Play");
        btnPlay.setFocusable(false);
        btnPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPlay);

        btnPause.setForeground(new java.awt.Color(255, 0, 0));
        btnPause.setText("Pause");
        btnPause.setFocusable(false);
        btnPause.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPause.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPause);

        btnStop.setForeground(new java.awt.Color(255, 0, 0));
        btnStop.setText("Stop");
        btnStop.setFocusable(false);
        btnStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        jToolBar1.add(btnStop);
        jToolBar1.add(jSeparator6);

        jSlider1.setValue(0);
        jSlider1.setPreferredSize(new java.awt.Dimension(500, 23));
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        jToolBar1.add(jSlider1);

        jPanel2.add(jToolBar1, java.awt.BorderLayout.NORTH);

        spAss.setDividerLocation(500);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255), 3));

        firstAssPanel.setLayout(new java.awt.BorderLayout());

        firstTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(firstTable);

        firstAssPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("First ASS", firstAssPanel);

        firstDataPanel.setBackground(new java.awt.Color(255, 255, 255));
        firstDataPanel.setLayout(new java.awt.BorderLayout());

        spFirstData.setBackground(new java.awt.Color(255, 255, 255));
        spFirstData.setDividerSize(15);
        spFirstData.setOneTouchExpandable(true);

        jLabel1.setText("Title :");

        jLabel2.setText("Author(s) :");

        jLabel3.setText("Translator(s) :");

        jLabel4.setText("Editor(s) :");

        jLabel5.setText("Timer(s) :");

        jLabel6.setText("Checker(s) :");

        jLabel7.setText("Synch point :");

        jLabel8.setText("Updated by :");

        jLabel9.setText("Updates :");

        jLabel10.setText("Collisions :");

        jLabel11.setText("Resolution on X :");

        jLabel12.setText("Resolution on Y :");

        jLabel13.setText("Play depth :");

        jLabel14.setText("Speed :");

        javax.swing.GroupLayout firstFileInfoPanelLayout = new javax.swing.GroupLayout(firstFileInfoPanel);
        firstFileInfoPanel.setLayout(firstFileInfoPanelLayout);
        firstFileInfoPanelLayout.setHorizontalGroup(
            firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(firstFileInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfFirstTitle)
                    .addComponent(tfFirstAuthor, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfFirstTranslator, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfFirstEditor, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfFirstTimer, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfFirstChecker, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfFirstSynchPoint, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfFirstUpdateby, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfFirstUpdates, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfFirstCollisions, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfFirstResX, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                    .addComponent(tfFirstResY, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfFirstPlayDepth)
                    .addComponent(tfFirstSpeed, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        firstFileInfoPanelLayout.setVerticalGroup(
            firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(firstFileInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfFirstTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfFirstAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfFirstTranslator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfFirstEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tfFirstTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tfFirstChecker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tfFirstSynchPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tfFirstUpdateby, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(tfFirstUpdates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(tfFirstCollisions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(tfFirstResX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(tfFirstResY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(tfFirstPlayDepth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(tfFirstSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(120, Short.MAX_VALUE))
        );

        spFirstData.setTopComponent(firstFileInfoPanel);

        firstChartPanel.setBackground(new java.awt.Color(255, 255, 255));
        firstChartPanel.setLayout(new javax.swing.BoxLayout(firstChartPanel, javax.swing.BoxLayout.PAGE_AXIS));
        spFirstData.setRightComponent(firstChartPanel);

        firstDataPanel.add(spFirstData, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Data", firstDataPanel);

        spAss.setLeftComponent(jTabbedPane1);

        jTabbedPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 51), 3));

        secondAssPanel.setLayout(new java.awt.BorderLayout());

        secondTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(secondTable);

        secondAssPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane2.addTab("Second ASS", secondAssPanel);

        secondDataPanel.setLayout(new java.awt.BorderLayout());

        spSecondData.setDividerSize(15);
        spSecondData.setOneTouchExpandable(true);

        jLabel15.setText("Resolution on X :");

        jLabel16.setText("Translator(s) :");

        jLabel17.setText("Synch point :");

        jLabel18.setText("Collisions :");

        jLabel19.setText("Updated by :");

        jLabel20.setText("Author(s) :");

        jLabel21.setText("Timer(s) :");

        jLabel22.setText("Editor(s) :");

        jLabel23.setText("Speed :");

        jLabel24.setText("Play depth :");

        jLabel25.setText("Updates :");

        jLabel26.setText("Checker(s) :");

        jLabel27.setText("Resolution on Y :");

        jLabel28.setText("Title :");

        javax.swing.GroupLayout secondFileInfoPanelLayout = new javax.swing.GroupLayout(secondFileInfoPanel);
        secondFileInfoPanel.setLayout(secondFileInfoPanelLayout);
        secondFileInfoPanelLayout.setHorizontalGroup(
            secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secondFileInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfSecondTitle)
                    .addComponent(tfSecondAuthor, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfSecondTranslator, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfSecondEditor, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfSecondTimer, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfSecondChecker, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfSecondSynchPoint, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfSecondUpdateBy, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfSecondUpdates, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfSecondCollisions, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfSecondResX, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfSecondResY, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfSecondPlayDepth)
                    .addComponent(tfSecondSpeed, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        secondFileInfoPanelLayout.setVerticalGroup(
            secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secondFileInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(tfSecondTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(tfSecondAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(tfSecondTranslator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(tfSecondEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(tfSecondTimer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(tfSecondChecker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(tfSecondSynchPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(tfSecondUpdateBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(tfSecondUpdates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(tfSecondCollisions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(tfSecondResX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(tfSecondResY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(tfSecondPlayDepth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondFileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(tfSecondSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(120, Short.MAX_VALUE))
        );

        spSecondData.setTopComponent(secondFileInfoPanel);

        secondChartPanel.setBackground(new java.awt.Color(255, 255, 255));
        secondChartPanel.setLayout(new javax.swing.BoxLayout(secondChartPanel, javax.swing.BoxLayout.PAGE_AXIS));
        spSecondData.setRightComponent(secondChartPanel);

        secondDataPanel.add(spSecondData, java.awt.BorderLayout.CENTER);

        jTabbedPane2.addTab("Data", secondDataPanel);

        spAss.setRightComponent(jTabbedPane2);

        jPanel2.add(spAss, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        mnuFirstASS.setText("Load the first ASS");
        mnuFirstASS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFirstASSActionPerformed(evt);
            }
        });
        jMenu1.add(mnuFirstASS);

        mnuClearFirst.setText("Clear the first ASS");
        mnuClearFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuClearFirstActionPerformed(evt);
            }
        });
        jMenu1.add(mnuClearFirst);
        jMenu1.add(jSeparator1);

        mnuSecondASS.setText("Load the second ASS");
        mnuSecondASS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSecondASSActionPerformed(evt);
            }
        });
        jMenu1.add(mnuSecondASS);

        mnuClearSecond.setText("Clear the second ASS");
        mnuClearSecond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuClearSecondActionPerformed(evt);
            }
        });
        jMenu1.add(mnuClearSecond);
        jMenu1.add(jSeparator2);

        mnuVideo.setText("Load the video");
        mnuVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuVideoActionPerformed(evt);
            }
        });
        jMenu1.add(mnuVideo);

        mnuClearVideo.setText("Clear the video");
        mnuClearVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuClearVideoActionPerformed(evt);
            }
        });
        jMenu1.add(mnuClearVideo);
        jMenu1.add(jSeparator3);

        mnuQuit.setText("Quit");
        mnuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuQuitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuQuit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("?");

        mnuAbout.setText("About");
        mnuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAboutActionPerformed(evt);
            }
        });
        jMenu2.add(mnuAbout);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuQuitActionPerformed

    private void mnuFirstASSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFirstASSActionPerformed
        for (FileFilter f : fcASS.getChoosableFileFilters()){
            fcASS.removeChoosableFileFilter(f);
        }
        fcASS.addChoosableFileFilter(new SubtitleFilter());
        fcASS.setAccessory(null);
        int z = this.fcASS.showOpenDialog(this);
        if (z == javax.swing.JFileChooser.APPROVE_OPTION){
            firstStyleCollection = new AssStyleCollection();

            // Open file
            if(fcASS.getSelectedFile().getName().endsWith("ssa")){
                AssIO aio = new AssIO();
                aio.LireFichierSSAi2(fcASS.getSelectedFile().getAbsolutePath(),
                        firstModel,firstInfos,firstStyleCollection,firstNameCollection,false);
                IO io = new IO();
                io.LireFichierSSAi2_Minimal(fcASS.getSelectedFile().getAbsolutePath(), firstSubList);
                setFirstInfos();
            }
            if(fcASS.getSelectedFile().getName().endsWith("ass")){
                AssIO aio = new AssIO();
                aio.LireFichierASSi2(fcASS.getSelectedFile().getAbsolutePath(),
                        firstModel,firstInfos,firstStyleCollection,firstNameCollection,false);
                IO io = new IO();
                io.LireFichierASSi2_Minimal(fcASS.getSelectedFile().getAbsolutePath(), firstSubList);
                setFirstInfos();
            }
        }
    }//GEN-LAST:event_mnuFirstASSActionPerformed

    private void mnuClearFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuClearFirstActionPerformed
        try{
            for (int i=firstModel.getRowCount()-1;i>=0;i--){
                firstModel.removeRow(i);
            }
            firstSubList.clear();
            vlc.setSubLists(firstSubList, secondSubList);
        }catch(Exception exc){}
    }//GEN-LAST:event_mnuClearFirstActionPerformed

    private void mnuSecondASSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSecondASSActionPerformed
        for (FileFilter f : fcASS.getChoosableFileFilters()){
            fcASS.removeChoosableFileFilter(f);
        }
        fcASS.addChoosableFileFilter(new SubtitleFilter());
        fcASS.setAccessory(null);
        int z = this.fcASS.showOpenDialog(this);
        if (z == javax.swing.JFileChooser.APPROVE_OPTION){
            secondStyleCollection = new AssStyleCollection();

            // Open file
            if(fcASS.getSelectedFile().getName().endsWith("ssa")){
                AssIO aio = new AssIO();
                aio.LireFichierSSAi2(fcASS.getSelectedFile().getAbsolutePath(),
                        secondModel,secondInfos,secondStyleCollection,secondNameCollection,false);
                IO io = new IO();
                io.LireFichierSSAi2_Minimal(fcASS.getSelectedFile().getAbsolutePath(), secondSubList);
                setSecondInfos();
            }
            if(fcASS.getSelectedFile().getName().endsWith("ass")){
                AssIO aio = new AssIO();
                aio.LireFichierASSi2(fcASS.getSelectedFile().getAbsolutePath(),
                        secondModel,secondInfos,secondStyleCollection,secondNameCollection,false);
                IO io = new IO();
                io.LireFichierASSi2_Minimal(fcASS.getSelectedFile().getAbsolutePath(), secondSubList);
                setSecondInfos();
            }
        }
    }//GEN-LAST:event_mnuSecondASSActionPerformed

    private void mnuClearSecondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuClearSecondActionPerformed
        try{
            for (int i=secondModel.getRowCount()-1;i>=0;i--){
                secondModel.removeRow(i);
            }
            secondSubList.clear();
            vlc.setSubLists(firstSubList, secondSubList);
        }catch(Exception exc){}
    }//GEN-LAST:event_mnuClearSecondActionPerformed

    private void mnuVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuVideoActionPerformed
        for (FileFilter f : fcASS.getChoosableFileFilters()){
            fcASS.removeChoosableFileFilter(f);
        }
        fcASS.addChoosableFileFilter(new VideoFilter());
        fcASS.setAccessory(null);
        int z = this.fcASS.showOpenDialog(this);
        if (z == javax.swing.JFileChooser.APPROVE_OPTION){
            
//            String assFile = "C:\\Users\\The Wingate 2940\\Desktop\\essai.ass";
//            AssStyleCollection mergeStyles = new AssStyleCollection();
//            for(AssStyle as1 : firstStyleCollection.getMembers()){
//                mergeStyles.addMember(as1.getName(), as1);
//            }
//            for(AssStyle as2 : secondStyleCollection.getMembers()){
//                mergeStyles.addMember(as2.getName(), as2);
//            }
//            AssIO aio = new AssIO();
//            aio.WriteFileFrom2ASS(assFile, firstModel, secondModel, secondInfos, mergeStyles, "UTF-8");
            
            vlc.setupVLCComponent();
            vlc.configure(fcASS.getSelectedFile().getAbsolutePath(), null);
            vlc.setSubLists(firstSubList, secondSubList);            
            jSplitPane1.setDividerLocation(vlc.getHeight());
            vlc.setLocation((getWidth()-vlc.getWidth())/2-1, 0);
        }
    }//GEN-LAST:event_mnuVideoActionPerformed

    private void mnuClearVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuClearVideoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnuClearVideoActionPerformed

    private void btnChangeSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeSentenceActionPerformed
        AnalyzeDialog ad = new AnalyzeDialog(this, true);
        ad.setLocationRelativeTo(null);
        boolean value = ad.showDialog();
        if(value==true){
            firstChartPanel.removeAll(); secondChartPanel.removeAll();            
            if(ad.compareBySentence()==true){
                compareBySentence();
            }else if(ad.compareByTime()==true){
                compareByStartTime();
            }else if(ad.compareByStyle()==true){
                
            }
            if(ad.makeBarChart()==true){                
                firstChartPanel.add(new BarChart3D("Old ASS", firstchartmap));
                secondChartPanel.add(new BarChart3D("New ASS", secondchartmap));
            }
            if(ad.makePieChart()==true){
                firstChartPanel.add(new PieChart3D("Old ASS", firstchartmap));
                secondChartPanel.add(new PieChart3D("New ASS", secondchartmap));
            }
        }
    }//GEN-LAST:event_btnChangeSentenceActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        vlc.play();
        vlc.setLocation((getWidth()-vlc.getWidth())/2, 0);
        vlc.initVLC(jSlider1);
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        vlc.pause();
    }//GEN-LAST:event_btnPauseActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        vlc.stop();
    }//GEN-LAST:event_btnStopActionPerformed

    private void tbNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbNormalActionPerformed
        firstCR.setTextType(CompareRenderer.TextType.Normal);
        secondCR.setTextType(CompareRenderer.TextType.Normal);
        firstTable.updateUI();
        secondTable.updateUI();
    }//GEN-LAST:event_tbNormalActionPerformed

    private void tbItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbItemsActionPerformed
        firstCR.setTextType(CompareRenderer.TextType.WithItems);
        secondCR.setTextType(CompareRenderer.TextType.WithItems);
        firstTable.updateUI();
        secondTable.updateUI();
    }//GEN-LAST:event_tbItemsActionPerformed

    private void tbStrippedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbStrippedActionPerformed
        firstCR.setTextType(CompareRenderer.TextType.StripAll);
        secondCR.setTextType(CompareRenderer.TextType.StripAll);
        firstTable.updateUI();
        secondTable.updateUI();
    }//GEN-LAST:event_tbStrippedActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        if(vlc.getState()==VLCj.State.PAUSE){
            
        }else if(vlc.getState()==VLCj.State.STOP){
            
        }      
    }//GEN-LAST:event_jSlider1StateChanged

    private void mnuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAboutActionPerformed
        AboutFrame af = new AboutFrame();
        af.setLocationRelativeTo(null);
        af.setVisible(true);
    }//GEN-LAST:event_mnuAboutActionPerformed

    private void init() {
        //Configuration du Look&Feel
        try {
            javax.swing.UIManager.setLookAndFeel(new NimbusLookAndFeel());
            javax.swing.SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception exc) {
            System.out.println("Nimbus LookAndFeel not loaded : "+exc);
        }
        
        //Configuration de la taille
        java.awt.Toolkit toolkit = java.awt.Toolkit.getDefaultToolkit(); 
        java.awt.Dimension dim = toolkit.getScreenSize();
        java.awt.GraphicsConfiguration gconf = java.awt.GraphicsEnvironment
                .getLocalGraphicsEnvironment().getDefaultScreenDevice()
                .getDefaultConfiguration();
        java.awt.Insets insets = toolkit.getScreenInsets(gconf);
        setSize(dim.width - insets.left - insets.right,
                dim.height - insets.top - insets.bottom);
        
        //Configuration du placement du séparateur
        spAss.setDividerLocation((dim.width - insets.left - insets.right - spAss.getDividerSize())/2);
        
        //Configuration des tables
        String[] fHead = new String[]{"#", "T", "L", "Marg.", "Start", "End",
                "Total", "Style", "Name", "Effect", "Text", "Change"};
        firstModel = new DefaultTableModel(null,fHead){
            Class[] types = new Class [] {
                    String.class, String.class, String.class,
                    String.class, String.class, String.class,
                    String.class, String.class, String.class,
                    String.class, String.class, LineChangeObject.class};
            boolean[] canEdit = new boolean [] {
                    false, false, false,
                    false, false, false,
                    false, false, false,
                    false, false, false};
            @Override
            public Class getColumnClass(int columnIndex) {return types [columnIndex];}
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {return canEdit [columnIndex];}
        };
        
        firstTable.setModel(firstModel);
        
        TableColumn column;
        for (int i = 0; i < 12; i++) {
            column = firstTable.getColumnModel().getColumn(i);
            switch(i){
                case 0: column.setPreferredWidth(30); column.setIdentifier(Column.ID.getId()); break; //ID
                case 1: column.setPreferredWidth(30); column.setIdentifier(Column.TYPE.getId()); break; //Type
                case 2: column.setPreferredWidth(30); column.setIdentifier(Column.LAYER.getId()); break; //Layer
                case 3: column.setPreferredWidth(60); column.setIdentifier(Column.MARGINS.getId()); break; //Margins
                case 4: column.setPreferredWidth(90); column.setIdentifier(Column.START.getId()); break; //Start
                case 5: column.setPreferredWidth(90); column.setIdentifier(Column.END.getId()); break; //End
                case 6: column.setPreferredWidth(90); column.setIdentifier(Column.TOTAL.getId()); break; //Total time
                case 7: column.setPreferredWidth(80); column.setIdentifier(Column.STYLE.getId()); break; //Style
                case 8: column.setPreferredWidth(80); column.setIdentifier(Column.NAME.getId()); break; //Name
                case 9: column.setPreferredWidth(20); column.setIdentifier(Column.EFFECTS.getId()); break; //Effects
                case 10: column.setPreferredWidth(700); column.setIdentifier(Column.TEXT.getId()); break; //Text
                case 11: column.setPreferredWidth(20); column.setIdentifier(Column.FX.getId()); break; //LineChangeObject
            }
        }
        
        firstTable.setDefaultRenderer(String.class, firstCR);
        firstTable.setDefaultRenderer(LineChangeObject.class, new CompareRenderer());
        
        String[] sHead = new String[]{"#", "T", "L", "Marg.", "Start", "End",
                "Total", "Style", "Name", "Effect", "Text", "Change"};
        secondModel = new DefaultTableModel(null,sHead){
            Class[] types = new Class [] {
                    String.class, String.class, String.class,
                    String.class, String.class, String.class,
                    String.class, String.class, String.class,
                    String.class, String.class, LineChangeObject.class};
            boolean[] canEdit = new boolean [] {
                    false, false, false,
                    false, false, false,
                    false, false, false,
                    false, false, false};
            @Override
            public Class getColumnClass(int columnIndex) {return types [columnIndex];}
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {return canEdit [columnIndex];}
        };
        
        secondTable.setModel(secondModel);
        
        for (int i = 0; i < 12; i++) {
            column = secondTable.getColumnModel().getColumn(i);
            switch(i){
                case 0: column.setPreferredWidth(30); column.setIdentifier(Column.ID.getId()); break; //ID
                case 1: column.setPreferredWidth(30); column.setIdentifier(Column.TYPE.getId()); break; //Type
                case 2: column.setPreferredWidth(30); column.setIdentifier(Column.LAYER.getId()); break; //Layer
                case 3: column.setPreferredWidth(60); column.setIdentifier(Column.MARGINS.getId()); break; //Margins
                case 4: column.setPreferredWidth(90); column.setIdentifier(Column.START.getId()); break; //Start
                case 5: column.setPreferredWidth(90); column.setIdentifier(Column.END.getId()); break; //End
                case 6: column.setPreferredWidth(90); column.setIdentifier(Column.TOTAL.getId()); break; //Total time
                case 7: column.setPreferredWidth(80); column.setIdentifier(Column.STYLE.getId()); break; //Style
                case 8: column.setPreferredWidth(80); column.setIdentifier(Column.NAME.getId()); break; //Name
                case 9: column.setPreferredWidth(20); column.setIdentifier(Column.EFFECTS.getId()); break; //Effects
                case 10: column.setPreferredWidth(700); column.setIdentifier(Column.TEXT.getId()); break; //Text
                case 11: column.setPreferredWidth(20); column.setIdentifier(Column.FX.getId()); break; //LineChangeObject
            }
        }
        
        secondTable.setDefaultRenderer(String.class, secondCR);
        secondTable.setDefaultRenderer(LineChangeObject.class, new CompareRenderer());
        
        //VLC
        jPanel1.add(vlc);
        
        //CurrentTime label
        lblCurrentTime.setForeground(Color.magenta);
        lblCurrentTime.setText("0:00:00.00");
        jToolBar1.add(lblCurrentTime, 10);
        
        //Configuration des panels pour les données
        spFirstData.setDividerLocation(400);
        spSecondData.setDividerLocation(400);
    }
    
    public enum Column{
        ID(0), TYPE(1), LAYER(2), MARGINS(3), START(4),
        END(5), TOTAL(6), STYLE(7), NAME(8), EFFECTS(9),
        TEXT(10), FX(11);
        
        private int id;
        
        Column(int id){
            this.id = id;
        }
        
        public int getId(){
            return id;
        }
    }
    
    public static void updateTime(long milli){
        Time t = Time.fromMillisecondsTime(milli);
        lblCurrentTime.setText(t.toASSTime());
    }
    
    private void setFirstInfos(){
        tfFirstTitle.setText(firstInfos.getElement(AssInfos.AssInfosType.title));
        tfFirstAuthor.setText(firstInfos.getElement(AssInfos.AssInfosType.authors));
        tfFirstTranslator.setText(firstInfos.getElement(AssInfos.AssInfosType.translators));
        tfFirstEditor.setText(firstInfos.getElement(AssInfos.AssInfosType.editors));
        tfFirstTimer.setText(firstInfos.getElement(AssInfos.AssInfosType.timers));
        tfFirstChecker.setText(firstInfos.getElement(AssInfos.AssInfosType.checkers));
        tfFirstSynchPoint.setText(firstInfos.getElement(AssInfos.AssInfosType.synchpoint));
        tfFirstUpdateby.setText(firstInfos.getElement(AssInfos.AssInfosType.updateby));
        tfFirstUpdates.setText(firstInfos.getElement(AssInfos.AssInfosType.updates));
        tfFirstCollisions.setText(firstInfos.getElement(AssInfos.AssInfosType.collisions));
        tfFirstResX.setText(firstInfos.getElement(AssInfos.AssInfosType.playresx));
        tfFirstResY.setText(firstInfos.getElement(AssInfos.AssInfosType.playresy));
        tfFirstPlayDepth.setText(firstInfos.getElement(AssInfos.AssInfosType.playdepth));
        tfFirstSpeed.setText(firstInfos.getElement(AssInfos.AssInfosType.timerspeed));
    }
    
    private void setSecondInfos(){
        tfSecondTitle.setText(secondInfos.getElement(AssInfos.AssInfosType.title));
        tfSecondAuthor.setText(secondInfos.getElement(AssInfos.AssInfosType.authors));
        tfSecondTranslator.setText(secondInfos.getElement(AssInfos.AssInfosType.translators));
        tfSecondEditor.setText(secondInfos.getElement(AssInfos.AssInfosType.editors));
        tfSecondTimer.setText(secondInfos.getElement(AssInfos.AssInfosType.timers));
        tfSecondChecker.setText(secondInfos.getElement(AssInfos.AssInfosType.checkers));
        tfSecondSynchPoint.setText(secondInfos.getElement(AssInfos.AssInfosType.synchpoint));
        tfSecondUpdateBy.setText(secondInfos.getElement(AssInfos.AssInfosType.updateby));
        tfSecondUpdates.setText(secondInfos.getElement(AssInfos.AssInfosType.updates));
        tfSecondCollisions.setText(secondInfos.getElement(AssInfos.AssInfosType.collisions));
        tfSecondResX.setText(secondInfos.getElement(AssInfos.AssInfosType.playresx));
        tfSecondResY.setText(secondInfos.getElement(AssInfos.AssInfosType.playresy));
        tfSecondPlayDepth.setText(secondInfos.getElement(AssInfos.AssInfosType.playdepth));
        tfSecondSpeed.setText(secondInfos.getElement(AssInfos.AssInfosType.timerspeed));
    }
    
    //<editor-fold defaultstate="collapsed" desc=" Méthodes de comparaison ">
    private void compareBySentence(){
        //On veut identifier les phrases en double (ou plus), c'est pour ça que
        //l'on va utiliser des Map afin d'avoir comme clé les phrases et comme
        //valeur leur nombre de fois dans le script
        Map<String, Integer> firstMap = new HashMap<>();
        Map<String, Integer> secondMap = new HashMap<>();
        
        //Traitement - Crée un rapport des changements -------------------------
        firstchartmap.clear(); secondchartmap.clear();
        //----------------------------------------------------------------------
        
        // On recherche les vieilles phrases
        for(int i=0;i<firstModel.getRowCount();i++){
            String firstSentence = (String)firstModel.getValueAt(i, 10);
            String firstStyle = (String)firstModel.getValueAt(i, 7);
            String firstName = (String)firstModel.getValueAt(i, 8);
            String firstStart = (String)firstModel.getValueAt(i, 4);
            String firstEnd = (String)firstModel.getValueAt(i, 5);
            String firstTotal = (String)firstModel.getValueAt(i, 6);
            LineChangeObject firstLCO = (LineChangeObject)firstModel.getValueAt(i, 11);
            
            //Traitement - Nombre de fois dans le script -----------------------
            if(firstMap.containsKey(firstSentence)){
                //On trouve une clé identique, on extrait le nombre de fois
                //puis on le modifie pour rerentrer la clé
                int value = firstMap.get(firstSentence);
                firstMap.put(firstSentence, value+1);
            }else{
                //On ne trouve pas cette clé, donc on l'ajoute
                firstMap.put(firstSentence, 1);
            }
            //------------------------------------------------------------------
            
            for(int j=0;j<secondModel.getRowCount();j++){
                String secondSentence = (String)secondModel.getValueAt(j, 10);
                String secondStyle = (String)secondModel.getValueAt(j, 7);
                String secondName = (String)secondModel.getValueAt(j, 8);
                String secondStart = (String)secondModel.getValueAt(j, 4);
                String secondEnd = (String)secondModel.getValueAt(j, 5);
                String secondTotal = (String)secondModel.getValueAt(j, 6);
                LineChangeObject secondLCO = (LineChangeObject)secondModel.getValueAt(j, 11);
                
                //Traitement - Nombre de fois dans le script -------------------
                if(secondMap.containsKey(secondSentence)){
                    //On trouve une clé identique, on extrait le nombre de fois
                    //puis on le modifie pour rerentrer la clé
                    int value = secondMap.get(secondSentence);
                    secondMap.put(secondSentence, value+1);
                }else{
                    //On ne trouve pas cette clé, donc on l'ajoute
                    secondMap.put(secondSentence, 1);
                }
                //--------------------------------------------------------------
                
                // Si la phrase est la même que la phrase recherchée alors elle
                // apparaît en double
                if(firstSentence.equals(secondSentence)){
                    firstLCO.changeSentenceState(LineChangeObject.SentenceState.Double);
                    secondLCO.changeSentenceState(LineChangeObject.SentenceState.Double);
                    //Traitement - Crée un rapport des changements -------------
                    incrementChartMap(firstchartmap, "Same lines");
                    incrementChartMap(secondchartmap, "Same lines");
                    //----------------------------------------------------------
                }
                
                // Si la phrase est en double, on regarde si des choses ont changé ou pas
                if(firstLCO.getSentenceState()==LineChangeObject.SentenceState.Double && firstLCO.getSentenceState()==secondLCO.getSentenceState()
                        && firstMap.get(firstSentence)==secondMap.get(secondSentence) && firstSentence.equals(secondSentence)){
                    // Cas 1 : Le style est le même, on change rien
                    // Cas 2 : Le style a changé, on répercute les changements
                    if(firstStyle.equals(secondStyle)==false && firstLCO.getStyleState()==LineChangeObject.StyleState.Unchanged){
                        firstLCO.changeStyleState(LineChangeObject.StyleState.Old);
                        secondLCO.changeStyleState(LineChangeObject.StyleState.New);
                        //Traitement - Crée un rapport des changements ---------
                        incrementChartMap(firstchartmap, "Old styles");
                        incrementChartMap(secondchartmap, "New styles");
                        //------------------------------------------------------
                    }
                    // Cas 1 : Le nom est le même, on change rien
                    // Cas 2 : Le nom a changé, on répercute les changements
                    if(firstName.equals(secondName)==false && firstLCO.getNameState()==LineChangeObject.NameState.Unchanged){
                        firstLCO.changeNameState(LineChangeObject.NameState.Old);
                        secondLCO.changeNameState(LineChangeObject.NameState.New);
                        //Traitement - Crée un rapport des changements ---------
                        incrementChartMap(firstchartmap, "Old names");
                        incrementChartMap(secondchartmap, "New names");
                        //------------------------------------------------------
                    }
                    // Cas 1 : Le temps total n'a pas changé, ni début et fin, on fait rien
                    // Cas 2 : Le temps total n'a pas changé, sauf le début et la fin, on répercute un décalage
                    if(firstTotal.equals(secondTotal) && firstStart.equals(secondStart)==false && firstLCO.getTimeState()==LineChangeObject.TimeState.Unchanged){
                        firstLCO.changeTimeState(LineChangeObject.TimeState.Shift);
                        secondLCO.changeTimeState(LineChangeObject.TimeState.Shift);
                        //Traitement - Crée un rapport des changements ---------
                        incrementChartMap(firstchartmap, "Synch. shifts");
                        incrementChartMap(secondchartmap, "Synch. shifts");
                        //------------------------------------------------------
                    }
                    // Cas 3 : Le temps total a changé
                    if(firstTotal.equals(secondTotal)==false && firstLCO.getTimeState()==LineChangeObject.TimeState.Unchanged){
                        firstLCO.changeTimeState(LineChangeObject.TimeState.Old);
                        secondLCO.changeTimeState(LineChangeObject.TimeState.New);
                        //Traitement - Crée un rapport des changements ---------
                        incrementChartMap(firstchartmap, "Old synch.");
                        incrementChartMap(secondchartmap, "New synch.");
                        //------------------------------------------------------
                    }
                }
                secondModel.setValueAt(secondLCO, j, 11);
            }
            // Si la phrase recherché est encore au status sentence unknown alors
            // c'est qu'elle est vieille et qu'elle a été supprimée dans le nouveau script
            if(firstLCO.getSentenceState()==LineChangeObject.SentenceState.Unknown){
                firstLCO.changeSentenceState(LineChangeObject.SentenceState.Deleted);
                //Traitement - Crée un rapport des changements -----------------
                incrementChartMap(firstchartmap, "Deleted lines");
                //--------------------------------------------------------------
            }
            firstModel.setValueAt(firstLCO, i, 11);
            
            //Initialise la seconde map (pour un bon recomptage)
            secondMap.clear();
        }
        // On recherche les nouvelles phrases
        for(int i=0;i<secondModel.getRowCount();i++){
            LineChangeObject secondLCO = (LineChangeObject)secondModel.getValueAt(i, 11);
            if(secondLCO.getSentenceState()==LineChangeObject.SentenceState.Unknown){
                secondLCO.changeSentenceState(LineChangeObject.SentenceState.Added);
                //Traitement - Crée un rapport des changements -----------------
                incrementChartMap(secondchartmap, "Added lines");
                //--------------------------------------------------------------
            }
            secondModel.setValueAt(secondLCO, i, 11);
        }
        
        firstTable.repaint();
        secondTable.repaint();
        firstTable.updateUI();
        secondTable.updateUI();
    }
    
    private void compareByStartTime(){
        //On veut identifier les temps en double (ou plus), c'est pour ça que
        //l'on va utiliser des Map afin d'avoir comme clé les temps et comme
        //valeur leur nombre de fois dans le script
        Map<String, Integer> firstMap = new HashMap<>();
        Map<String, Integer> secondMap = new HashMap<>();
        
        //Traitement - Crée un rapport des changements -------------------------
        firstchartmap.clear(); secondchartmap.clear();
        //----------------------------------------------------------------------
        
        // On recherche les vieilles phrases
        for(int i=0;i<firstModel.getRowCount();i++){
            String firstSentence = (String)firstModel.getValueAt(i, 10);
            String firstStyle = (String)firstModel.getValueAt(i, 7);
            String firstName = (String)firstModel.getValueAt(i, 8);
            String firstStart = (String)firstModel.getValueAt(i, 4);
            String firstEnd = (String)firstModel.getValueAt(i, 5);
            String firstTotal = (String)firstModel.getValueAt(i, 6);
            LineChangeObject firstLCO = (LineChangeObject)firstModel.getValueAt(i, 11);
            
            //Traitement - Nombre de fois dans le script -----------------------
            if(firstMap.containsKey(firstStart)){
                //On trouve une clé identique, on extrait le nombre de fois
                //puis on le modifie pour rerentrer la clé
                int value = firstMap.get(firstStart);
                firstMap.put(firstStart, value+1);
            }else{
                //On ne trouve pas cette clé, donc on l'ajoute
                firstMap.put(firstStart, 1);
            }
            //------------------------------------------------------------------
            
            for(int j=0;j<secondModel.getRowCount();j++){
                String secondSentence = (String)secondModel.getValueAt(j, 10);
                String secondStyle = (String)secondModel.getValueAt(j, 7);
                String secondName = (String)secondModel.getValueAt(j, 8);
                String secondStart = (String)secondModel.getValueAt(j, 4);
                String secondEnd = (String)secondModel.getValueAt(j, 5);
                String secondTotal = (String)secondModel.getValueAt(j, 6);
                LineChangeObject secondLCO = (LineChangeObject)secondModel.getValueAt(j, 11);
                
                //Traitement - Nombre de fois dans le script -------------------
                if(secondMap.containsKey(secondStart)){
                    //On trouve une clé identique, on extrait le nombre de fois
                    //puis on le modifie pour rerentrer la clé
                    int value = secondMap.get(secondStart);
                    secondMap.put(secondStart, value+1);
                }else{
                    //On ne trouve pas cette clé, donc on l'ajoute
                    secondMap.put(secondStart, 1);
                }
                //--------------------------------------------------------------
                
                // Si le temps est la même que la phrase recherchée alors elle
                // apparaît en double
                if(firstStart.equals(secondStart) && firstEnd.equals(secondEnd)){
                    firstLCO.changeTimeState(LineChangeObject.TimeState.Double);
                    secondLCO.changeTimeState(LineChangeObject.TimeState.Double);
                    //Traitement - Crée un rapport des changements -------------
                    incrementChartMap(firstchartmap, "Same synch.");
                    incrementChartMap(secondchartmap, "Same synch.");
                    //----------------------------------------------------------
                }
                
                // Si la phrase est en double, on regarde si des choses ont changé ou pas
                if(firstLCO.getTimeState()==LineChangeObject.TimeState.Double && firstLCO.getTimeState()==secondLCO.getTimeState()
                        && firstMap.get(firstStart)==secondMap.get(secondStart) && firstStart.equals(secondStart) && firstEnd.equals(secondEnd)){
                    // Cas 1 : Le style est le même, on change rien
                    // Cas 2 : Le style a changé, on répercute les changements
                    if(firstStyle.equals(secondStyle)==false && firstLCO.getStyleState()==LineChangeObject.StyleState.Unchanged){
                        firstLCO.changeStyleState(LineChangeObject.StyleState.Old);
                        secondLCO.changeStyleState(LineChangeObject.StyleState.New);
                        //Traitement - Crée un rapport des changements ---------
                        incrementChartMap(firstchartmap, "Old styles");
                        incrementChartMap(secondchartmap, "New styles");
                        //------------------------------------------------------
                    }
                    // Cas 1 : Le nom est le même, on change rien
                    // Cas 2 : Le nom a changé, on répercute les changements
                    if(firstName.equals(secondName)==false && firstLCO.getNameState()==LineChangeObject.NameState.Unchanged){
                        firstLCO.changeNameState(LineChangeObject.NameState.Old);
                        secondLCO.changeNameState(LineChangeObject.NameState.New);
                        //Traitement - Crée un rapport des changements ---------
                        incrementChartMap(firstchartmap, "Old names");
                        incrementChartMap(secondchartmap, "New names");
                        //------------------------------------------------------
                    }
                    // Cas 1 : La phrase n'a pas changé, on ne fait rien
                    // Cas 2 : La phrase a changé, on répercute ce changement
                    if(firstSentence.equals(secondSentence)==false && firstLCO.getSentenceState()==LineChangeObject.SentenceState.Unknown){
                        firstLCO.changeSentenceState(LineChangeObject.SentenceState.Deleted);
                        secondLCO.changeSentenceState(LineChangeObject.SentenceState.Added);
                        //Traitement - Crée un rapport des changements ---------
                        incrementChartMap(firstchartmap, "Deleted lines");
                        incrementChartMap(secondchartmap, "Added lines");
                        //------------------------------------------------------
                    }
                }
                secondModel.setValueAt(secondLCO, j, 11);
            }
            // Si le temps recherché est encore au status sentence unchanged alors
            // c'est qu'il est vieux et qu'il a été supprimé dans le nouveau script
            if(firstLCO.getTimeState()==LineChangeObject.TimeState.Unchanged){
                firstLCO.changeTimeState(LineChangeObject.TimeState.Old);
                //Traitement - Crée un rapport des changements -----------------
                incrementChartMap(firstchartmap, "Old synch.");
                //--------------------------------------------------------------
            }
            firstModel.setValueAt(firstLCO, i, 11);
            
            //Initialise la seconde map (pour un bon recomptage)
            secondMap.clear();
        }
        // On recherche les nouveaux temps
        for(int i=0;i<secondModel.getRowCount();i++){
            LineChangeObject secondLCO = (LineChangeObject)secondModel.getValueAt(i, 11);
            if(secondLCO.getTimeState()==LineChangeObject.TimeState.Unchanged){
                secondLCO.changeTimeState(LineChangeObject.TimeState.New);
                //Traitement - Crée un rapport des changements -----------------
                incrementChartMap(secondchartmap, "New synch.");
                //--------------------------------------------------------------
            }
            secondModel.setValueAt(secondLCO, i, 11);
        }
        
        firstTable.repaint();
        secondTable.repaint();
        firstTable.updateUI();
        secondTable.updateUI();
    }
    
    private void incrementChartMap(Map<String, Integer> chartmap, String key){
        if(chartmap.containsKey(key)){
            //On trouve une clé identique, on extrait le nombre de fois
            //puis on le modifie pour rerentrer la clé
            int kvalue = chartmap.get(key);
            chartmap.put(key, kvalue+1);
        }else{
            //On ne trouve pas cette clé, donc on l'ajoute
            chartmap.put(key, 1);
        }
    }
    //</editor-fold>
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VMilkshake.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new VMilkshake().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgStripItems;
    private javax.swing.JButton btnChangeSentence;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnStop;
    private javax.swing.JFileChooser fcASS;
    private javax.swing.JPanel firstAssPanel;
    private javax.swing.JPanel firstChartPanel;
    private javax.swing.JPanel firstDataPanel;
    private javax.swing.JPanel firstFileInfoPanel;
    private javax.swing.JTable firstTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem mnuAbout;
    private javax.swing.JMenuItem mnuClearFirst;
    private javax.swing.JMenuItem mnuClearSecond;
    private javax.swing.JMenuItem mnuClearVideo;
    private javax.swing.JMenuItem mnuFirstASS;
    private javax.swing.JMenuItem mnuQuit;
    private javax.swing.JMenuItem mnuSecondASS;
    private javax.swing.JMenuItem mnuVideo;
    private javax.swing.JPanel secondAssPanel;
    private javax.swing.JPanel secondChartPanel;
    private javax.swing.JPanel secondDataPanel;
    private javax.swing.JPanel secondFileInfoPanel;
    private javax.swing.JTable secondTable;
    private javax.swing.JSplitPane spAss;
    private javax.swing.JSplitPane spFirstData;
    private javax.swing.JSplitPane spSecondData;
    private javax.swing.JToggleButton tbItems;
    private javax.swing.JToggleButton tbNormal;
    private javax.swing.JToggleButton tbStripped;
    private javax.swing.JTextField tfFirstAuthor;
    private javax.swing.JTextField tfFirstChecker;
    private javax.swing.JTextField tfFirstCollisions;
    private javax.swing.JTextField tfFirstEditor;
    private javax.swing.JTextField tfFirstPlayDepth;
    private javax.swing.JTextField tfFirstResX;
    private javax.swing.JTextField tfFirstResY;
    private javax.swing.JTextField tfFirstSpeed;
    private javax.swing.JTextField tfFirstSynchPoint;
    private javax.swing.JTextField tfFirstTimer;
    private javax.swing.JTextField tfFirstTitle;
    private javax.swing.JTextField tfFirstTranslator;
    private javax.swing.JTextField tfFirstUpdateby;
    private javax.swing.JTextField tfFirstUpdates;
    private javax.swing.JTextField tfSecondAuthor;
    private javax.swing.JTextField tfSecondChecker;
    private javax.swing.JTextField tfSecondCollisions;
    private javax.swing.JTextField tfSecondEditor;
    private javax.swing.JTextField tfSecondPlayDepth;
    private javax.swing.JTextField tfSecondResX;
    private javax.swing.JTextField tfSecondResY;
    private javax.swing.JTextField tfSecondSpeed;
    private javax.swing.JTextField tfSecondSynchPoint;
    private javax.swing.JTextField tfSecondTimer;
    private javax.swing.JTextField tfSecondTitle;
    private javax.swing.JTextField tfSecondTranslator;
    private javax.swing.JTextField tfSecondUpdateBy;
    private javax.swing.JTextField tfSecondUpdates;
    // End of variables declaration//GEN-END:variables
    
}
