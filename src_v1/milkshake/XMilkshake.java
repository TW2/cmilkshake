/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package milkshake;

import javax.swing.filechooser.FileFilter;
import javax.swing.plaf.nimbus.NimbusLookAndFeel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import milkshake.ass.AssIO;
import milkshake.ass.AssInfos;
import milkshake.ass.AssNameCollection;
import milkshake.ass.AssStyleCollection;
import milkshake.filter.SubtitleFilter;
import milkshake.filter.VideoFilter;
import milkshake.lib.LineChangeObject;
import milkshake.lib.XMedia;
import milkshake.renderer.CompareRenderer;

/**
 * XMilkshake -> Xuggle Milkshake
 * @author The Wingate 2940
 */
public class XMilkshake extends javax.swing.JFrame {
    
    DefaultTableModel firstModel, secondModel;
    AssStyleCollection firstStyleCollection = new AssStyleCollection();    
    AssStyleCollection secondStyleCollection = new AssStyleCollection();
    AssInfos firstInfos = new AssInfos();
    AssInfos secondInfos = new AssInfos();
    AssNameCollection firstNameCollection = new AssNameCollection();
    AssNameCollection secondNameCollection = new AssNameCollection();
    CompareRenderer firstCR = new CompareRenderer();
    CompareRenderer secondCR = new CompareRenderer();
    XMedia xuggle = new XMedia();

    /**
     * Creates new form MyMilkshake
     */
    public XMilkshake() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fcASS = new javax.swing.JFileChooser();
        bgStripItems = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        tbNormal = new javax.swing.JToggleButton();
        tbItems = new javax.swing.JToggleButton();
        tbStripped = new javax.swing.JToggleButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnChangeSentence = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        btnPlay = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jButton1 = new javax.swing.JButton();
        spAss = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        firstTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        secondTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuFirstASS = new javax.swing.JMenuItem();
        mnuClearFirst = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuSecondASS = new javax.swing.JMenuItem();
        mnuClearSecond = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuVideo = new javax.swing.JMenuItem();
        mnuClearVideo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnuQuit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 805, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jSplitPane1.setTopComponent(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        bgStripItems.add(tbNormal);
        tbNormal.setForeground(new java.awt.Color(0, 204, 0));
        tbNormal.setSelected(true);
        tbNormal.setText("Text");
        tbNormal.setFocusable(false);
        tbNormal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbNormal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbNormalActionPerformed(evt);
            }
        });
        jToolBar1.add(tbNormal);

        bgStripItems.add(tbItems);
        tbItems.setForeground(new java.awt.Color(0, 204, 0));
        tbItems.setText("Items");
        tbItems.setFocusable(false);
        tbItems.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbItems.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbItemsActionPerformed(evt);
            }
        });
        jToolBar1.add(tbItems);

        bgStripItems.add(tbStripped);
        tbStripped.setForeground(new java.awt.Color(0, 204, 0));
        tbStripped.setText("Stripped");
        tbStripped.setFocusable(false);
        tbStripped.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbStripped.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbStripped.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbStrippedActionPerformed(evt);
            }
        });
        jToolBar1.add(tbStripped);
        jToolBar1.add(jSeparator4);

        btnChangeSentence.setForeground(new java.awt.Color(0, 0, 204));
        btnChangeSentence.setText("Analyze");
        btnChangeSentence.setFocusable(false);
        btnChangeSentence.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnChangeSentence.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnChangeSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeSentenceActionPerformed(evt);
            }
        });
        jToolBar1.add(btnChangeSentence);
        jToolBar1.add(jSeparator5);

        btnPlay.setForeground(new java.awt.Color(255, 0, 0));
        btnPlay.setText("Play");
        btnPlay.setFocusable(false);
        btnPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPlay);

        btnPause.setForeground(new java.awt.Color(255, 0, 0));
        btnPause.setText("Pause");
        btnPause.setFocusable(false);
        btnPause.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPause.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPause);

        btnStop.setForeground(new java.awt.Color(255, 0, 0));
        btnStop.setText("Stop");
        btnStop.setFocusable(false);
        btnStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        jToolBar1.add(btnStop);
        jToolBar1.add(jSeparator6);

        jLabel1.setForeground(new java.awt.Color(204, 0, 204));
        jLabel1.setText("0:00:00.00");
        jToolBar1.add(jLabel1);

        jSlider1.setValue(0);
        jSlider1.setPreferredSize(new java.awt.Dimension(500, 23));
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        jToolBar1.add(jSlider1);

        jButton1.setText("jButton1");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jPanel2.add(jToolBar1, java.awt.BorderLayout.NORTH);

        spAss.setDividerLocation(500);

        jPanel3.setLayout(new java.awt.BorderLayout());

        firstTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(firstTable);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("First ASS", jPanel3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 494, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 497, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Data", jPanel4);

        spAss.setLeftComponent(jTabbedPane1);

        jPanel5.setLayout(new java.awt.BorderLayout());

        secondTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(secondTable);

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane2.addTab("Second ASS", jPanel5);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 294, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 497, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Data", jPanel6);

        spAss.setRightComponent(jTabbedPane2);

        jPanel2.add(spAss, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        mnuFirstASS.setText("Load the first ASS");
        mnuFirstASS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFirstASSActionPerformed(evt);
            }
        });
        jMenu1.add(mnuFirstASS);

        mnuClearFirst.setText("Clear the first ASS");
        mnuClearFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuClearFirstActionPerformed(evt);
            }
        });
        jMenu1.add(mnuClearFirst);
        jMenu1.add(jSeparator1);

        mnuSecondASS.setText("Load the second ASS");
        mnuSecondASS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSecondASSActionPerformed(evt);
            }
        });
        jMenu1.add(mnuSecondASS);

        mnuClearSecond.setText("Clear the second ASS");
        mnuClearSecond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuClearSecondActionPerformed(evt);
            }
        });
        jMenu1.add(mnuClearSecond);
        jMenu1.add(jSeparator2);

        mnuVideo.setText("Load the video");
        mnuVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuVideoActionPerformed(evt);
            }
        });
        jMenu1.add(mnuVideo);

        mnuClearVideo.setText("Clear the video");
        mnuClearVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuClearVideoActionPerformed(evt);
            }
        });
        jMenu1.add(mnuClearVideo);
        jMenu1.add(jSeparator3);

        mnuQuit.setText("Quit");
        mnuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuQuitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuQuit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuQuitActionPerformed

    private void mnuFirstASSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFirstASSActionPerformed
        for (FileFilter f : fcASS.getChoosableFileFilters()){
            fcASS.removeChoosableFileFilter(f);
        }
        fcASS.addChoosableFileFilter(new SubtitleFilter());
        fcASS.setAccessory(null);
        int z = this.fcASS.showOpenDialog(this);
        if (z == javax.swing.JFileChooser.APPROVE_OPTION){
            firstStyleCollection = new AssStyleCollection();

            // Open file
            if(fcASS.getSelectedFile().getName().endsWith("ssa")){
                AssIO aio = new AssIO();
                aio.LireFichierSSAi2(fcASS.getSelectedFile().getPath(),
                        firstModel,firstInfos,firstStyleCollection,firstNameCollection,false);
            }
            if(fcASS.getSelectedFile().getName().endsWith("ass")){
                AssIO aio = new AssIO();
                aio.LireFichierASSi2(fcASS.getSelectedFile().getPath(),
                        firstModel,firstInfos,firstStyleCollection,firstNameCollection,false);
            }
        }
    }//GEN-LAST:event_mnuFirstASSActionPerformed

    private void mnuClearFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuClearFirstActionPerformed
        try{
            for (int i=firstModel.getRowCount()-1;i>=0;i--){
                firstModel.removeRow(i);
            }
        }catch(Exception exc){}
    }//GEN-LAST:event_mnuClearFirstActionPerformed

    private void mnuSecondASSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSecondASSActionPerformed
        for (FileFilter f : fcASS.getChoosableFileFilters()){
            fcASS.removeChoosableFileFilter(f);
        }
        fcASS.addChoosableFileFilter(new SubtitleFilter());
        fcASS.setAccessory(null);
        int z = this.fcASS.showOpenDialog(this);
        if (z == javax.swing.JFileChooser.APPROVE_OPTION){
            secondStyleCollection = new AssStyleCollection();

            // Open file
            if(fcASS.getSelectedFile().getName().endsWith("ssa")){
                AssIO aio = new AssIO();
                aio.LireFichierSSAi2(fcASS.getSelectedFile().getPath(),
                        secondModel,secondInfos,secondStyleCollection,secondNameCollection,false);
            }
            if(fcASS.getSelectedFile().getName().endsWith("ass")){
                AssIO aio = new AssIO();
                aio.LireFichierASSi2(fcASS.getSelectedFile().getPath(),
                        secondModel,secondInfos,secondStyleCollection,secondNameCollection,false);
            }
        }
    }//GEN-LAST:event_mnuSecondASSActionPerformed

    private void mnuClearSecondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuClearSecondActionPerformed
        try{
            for (int i=secondModel.getRowCount()-1;i>=0;i--){
                secondModel.removeRow(i);
            }
        }catch(Exception exc){}
    }//GEN-LAST:event_mnuClearSecondActionPerformed

    private void mnuVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuVideoActionPerformed
        for (FileFilter f : fcASS.getChoosableFileFilters()){
            fcASS.removeChoosableFileFilter(f);
        }
        fcASS.addChoosableFileFilter(new VideoFilter());
        fcASS.setAccessory(null);
        int z = this.fcASS.showOpenDialog(this);
        if (z == javax.swing.JFileChooser.APPROVE_OPTION){
            
            xuggle.setPath(fcASS.getSelectedFile().getAbsolutePath());
            
        }        
    }//GEN-LAST:event_mnuVideoActionPerformed

    private void mnuClearVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuClearVideoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnuClearVideoActionPerformed

    private void btnChangeSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeSentenceActionPerformed
        // On recherche les vieilles phrases
        for(int i=0;i<firstModel.getRowCount();i++){
            String firstSentence = (String)firstModel.getValueAt(i, 10);
            String firstStyle = (String)firstModel.getValueAt(i, 7);
            String firstName = (String)firstModel.getValueAt(i, 8);
            String firstStart = (String)firstModel.getValueAt(i, 4);
            String firstEnd = (String)firstModel.getValueAt(i, 5);
            String firstTotal = (String)firstModel.getValueAt(i, 6);
            LineChangeObject firstLCO = (LineChangeObject)firstModel.getValueAt(i, 11);
            for(int j=0;j<secondModel.getRowCount();j++){
                String secondSentence = (String)secondModel.getValueAt(j, 10);
                String secondStyle = (String)secondModel.getValueAt(j, 7);
                String secondName = (String)secondModel.getValueAt(j, 8);
                String secondStart = (String)secondModel.getValueAt(j, 4);
                String secondEnd = (String)secondModel.getValueAt(j, 5);
                String secondTotal = (String)secondModel.getValueAt(j, 6);
                LineChangeObject secondLCO = (LineChangeObject)secondModel.getValueAt(j, 11);
                
                // Si la phrase est la même que la phrase recherchée alors elle
                // apparaît en double
                if(firstSentence.equals(secondSentence)){
                    firstLCO.changeSentenceState(LineChangeObject.SentenceState.Double);
                    secondLCO.changeSentenceState(LineChangeObject.SentenceState.Double);
                }
                
                // Si la phrase est en double, on regarde si des choses ont changé ou pas
                if(firstLCO.getSentenceState()==LineChangeObject.SentenceState.Double){
                    // Cas 1 : Le style est le même, on change rien
                    // Cas 2 : Le style a changé, on répercute les changements
                    if(firstStyle.equals(secondStyle)==false && firstLCO.getStyleState()==LineChangeObject.StyleState.Unchanged){
                        firstLCO.changeStyleState(LineChangeObject.StyleState.Old);
                        secondLCO.changeStyleState(LineChangeObject.StyleState.New);
                    }
                    // Cas 1 : Le nom est le même, on change rien
                    // Cas 2 : Le nom a changé, on répercute les changements
                    if(firstName.equals(secondName)==false && firstLCO.getNameState()==LineChangeObject.NameState.Unchanged){
                        firstLCO.changeNameState(LineChangeObject.NameState.Old);
                        secondLCO.changeNameState(LineChangeObject.NameState.New);
                    }
                    // Cas 1 : Le temps total n'a pas changé, ni début et fin, on fait rien
                    // Cas 2 : Le temps total n'a pas changé, sauf le début et la fin, on répercute un décalage
                    if(firstTotal.equals(secondTotal) && firstStart.equals(secondStart)==false && firstLCO.getTimeState()==LineChangeObject.TimeState.Unchanged){
                        firstLCO.changeTimeState(LineChangeObject.TimeState.Shift);
                        secondLCO.changeTimeState(LineChangeObject.TimeState.Shift);
                    }
                    // Cas 3 : Le temps total a changé
                    if(firstTotal.equals(secondTotal)==false && firstLCO.getTimeState()==LineChangeObject.TimeState.Unchanged){
                        firstLCO.changeTimeState(LineChangeObject.TimeState.Old);
                        secondLCO.changeTimeState(LineChangeObject.TimeState.New);
                    }
                }
                secondModel.setValueAt(secondLCO, j, 11);
            }
            // Si la phrase recherché est encore au status sentence unknown alors
            // c'est qu'elle est vieille et qu'elle a été supprimée dans le nouveau script
            if(firstLCO.getSentenceState()==LineChangeObject.SentenceState.Unknown){
                firstLCO.changeSentenceState(LineChangeObject.SentenceState.Deleted);
            }
            firstModel.setValueAt(firstLCO, i, 11);
        }
        // On recherche les nouvelles phrases
        for(int i=0;i<secondModel.getRowCount();i++){
            LineChangeObject secondLCO = (LineChangeObject)secondModel.getValueAt(i, 11);
            if(secondLCO.getSentenceState()==LineChangeObject.SentenceState.Unknown){
                secondLCO.changeSentenceState(LineChangeObject.SentenceState.Added);
            }
            secondModel.setValueAt(secondLCO, i, 11);
        }
        
        
        firstTable.repaint();
        secondTable.repaint();
        firstTable.updateUI();
        secondTable.updateUI();
    }//GEN-LAST:event_btnChangeSentenceActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        xuggle.startEncode();
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        xuggle.stopEncode();
    }//GEN-LAST:event_btnPauseActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        xuggle.stopEncode();
    }//GEN-LAST:event_btnStopActionPerformed

    private void tbNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbNormalActionPerformed
        firstCR.setTextType(CompareRenderer.TextType.Normal);
        secondCR.setTextType(CompareRenderer.TextType.Normal);
        firstTable.updateUI();
        secondTable.updateUI();
    }//GEN-LAST:event_tbNormalActionPerformed

    private void tbItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbItemsActionPerformed
        firstCR.setTextType(CompareRenderer.TextType.WithItems);
        secondCR.setTextType(CompareRenderer.TextType.WithItems);
        firstTable.updateUI();
        secondTable.updateUI();
    }//GEN-LAST:event_tbItemsActionPerformed

    private void tbStrippedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbStrippedActionPerformed
        firstCR.setTextType(CompareRenderer.TextType.StripAll);
        secondCR.setTextType(CompareRenderer.TextType.StripAll);
        firstTable.updateUI();
        secondTable.updateUI();
    }//GEN-LAST:event_tbStrippedActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
            
    }//GEN-LAST:event_jSlider1StateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void init() {
        //Configuration du Look&Feel
        try {
            javax.swing.UIManager.setLookAndFeel(new NimbusLookAndFeel());
            javax.swing.SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception exc) {
            System.out.println("Nimbus LookAndFeel not loaded : "+exc);
        }
        
        //Configuration de la taille
        java.awt.Toolkit toolkit = java.awt.Toolkit.getDefaultToolkit(); 
        java.awt.Dimension dim = toolkit.getScreenSize();
        java.awt.GraphicsConfiguration gconf = java.awt.GraphicsEnvironment
                .getLocalGraphicsEnvironment().getDefaultScreenDevice()
                .getDefaultConfiguration();
        java.awt.Insets insets = toolkit.getScreenInsets(gconf);
        setSize(dim.width - insets.left - insets.right,
                dim.height - insets.top - insets.bottom);
        
        //Configuration du placement du séparateur
        spAss.setDividerLocation((dim.width - insets.left - insets.right - spAss.getDividerSize())/2);
        
        //Configuration des tables
        String[] fHead = new String[]{"#", "T", "L", "Marg.", "Start", "End",
                "Total", "Style", "Name", "Effect", "Text", "Change"};
        firstModel = new DefaultTableModel(null,fHead){
            Class[] types = new Class [] {
                    String.class, String.class, String.class,
                    String.class, String.class, String.class,
                    String.class, String.class, String.class,
                    String.class, String.class, LineChangeObject.class};
            boolean[] canEdit = new boolean [] {
                    false, false, false,
                    false, false, false,
                    false, false, false,
                    false, false, false};
            @Override
            public Class getColumnClass(int columnIndex) {return types [columnIndex];}
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {return canEdit [columnIndex];}
        };
        
        firstTable.setModel(firstModel);
        
        TableColumn column;
        for (int i = 0; i < 12; i++) {
            column = firstTable.getColumnModel().getColumn(i);
            switch(i){
                case 0: column.setPreferredWidth(30); column.setIdentifier(Column.ID.getId()); break; //ID
                case 1: column.setPreferredWidth(30); column.setIdentifier(Column.TYPE.getId()); break; //Type
                case 2: column.setPreferredWidth(30); column.setIdentifier(Column.LAYER.getId()); break; //Layer
                case 3: column.setPreferredWidth(60); column.setIdentifier(Column.MARGINS.getId()); break; //Margins
                case 4: column.setPreferredWidth(90); column.setIdentifier(Column.START.getId()); break; //Start
                case 5: column.setPreferredWidth(90); column.setIdentifier(Column.END.getId()); break; //End
                case 6: column.setPreferredWidth(90); column.setIdentifier(Column.TOTAL.getId()); break; //Total time
                case 7: column.setPreferredWidth(80); column.setIdentifier(Column.STYLE.getId()); break; //Style
                case 8: column.setPreferredWidth(80); column.setIdentifier(Column.NAME.getId()); break; //Name
                case 9: column.setPreferredWidth(20); column.setIdentifier(Column.EFFECTS.getId()); break; //Effects
                case 10: column.setPreferredWidth(700); column.setIdentifier(Column.TEXT.getId()); break; //Text
                case 11: column.setPreferredWidth(20); column.setIdentifier(Column.FX.getId()); break; //LineChangeObject
            }
        }
        
        firstTable.setDefaultRenderer(String.class, firstCR);
        firstTable.setDefaultRenderer(LineChangeObject.class, new CompareRenderer());
        
        String[] sHead = new String[]{"#", "T", "L", "Marg.", "Start", "End",
                "Total", "Style", "Name", "Effect", "Text", "Change"};
        secondModel = new DefaultTableModel(null,sHead){
            Class[] types = new Class [] {
                    String.class, String.class, String.class,
                    String.class, String.class, String.class,
                    String.class, String.class, String.class,
                    String.class, String.class, LineChangeObject.class};
            boolean[] canEdit = new boolean [] {
                    false, false, false,
                    false, false, false,
                    false, false, false,
                    false, false, false};
            @Override
            public Class getColumnClass(int columnIndex) {return types [columnIndex];}
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {return canEdit [columnIndex];}
        };
        
        secondTable.setModel(secondModel);
        
        for (int i = 0; i < 12; i++) {
            column = secondTable.getColumnModel().getColumn(i);
            switch(i){
                case 0: column.setPreferredWidth(30); column.setIdentifier(Column.ID.getId()); break; //ID
                case 1: column.setPreferredWidth(30); column.setIdentifier(Column.TYPE.getId()); break; //Type
                case 2: column.setPreferredWidth(30); column.setIdentifier(Column.LAYER.getId()); break; //Layer
                case 3: column.setPreferredWidth(60); column.setIdentifier(Column.MARGINS.getId()); break; //Margins
                case 4: column.setPreferredWidth(90); column.setIdentifier(Column.START.getId()); break; //Start
                case 5: column.setPreferredWidth(90); column.setIdentifier(Column.END.getId()); break; //End
                case 6: column.setPreferredWidth(90); column.setIdentifier(Column.TOTAL.getId()); break; //Total time
                case 7: column.setPreferredWidth(80); column.setIdentifier(Column.STYLE.getId()); break; //Style
                case 8: column.setPreferredWidth(80); column.setIdentifier(Column.NAME.getId()); break; //Name
                case 9: column.setPreferredWidth(20); column.setIdentifier(Column.EFFECTS.getId()); break; //Effects
                case 10: column.setPreferredWidth(700); column.setIdentifier(Column.TEXT.getId()); break; //Text
                case 11: column.setPreferredWidth(20); column.setIdentifier(Column.FX.getId()); break; //LineChangeObject
            }
        }
        
        secondTable.setDefaultRenderer(String.class, secondCR);
        secondTable.setDefaultRenderer(LineChangeObject.class, new CompareRenderer());
        
        //Xuggle
        jPanel1.add(xuggle);
    }
    
    public enum Column{
        ID(0), TYPE(1), LAYER(2), MARGINS(3), START(4),
        END(5), TOTAL(6), STYLE(7), NAME(8), EFFECTS(9),
        TEXT(10), FX(11);
        
        private int id;
        
        Column(int id){
            this.id = id;
        }
        
        public int getId(){
            return id;
        }
    }
    
    private void showChange(){
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XMilkshake.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new XMilkshake().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgStripItems;
    private javax.swing.JButton btnChangeSentence;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnStop;
    private javax.swing.JFileChooser fcASS;
    private javax.swing.JTable firstTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem mnuClearFirst;
    private javax.swing.JMenuItem mnuClearSecond;
    private javax.swing.JMenuItem mnuClearVideo;
    private javax.swing.JMenuItem mnuFirstASS;
    private javax.swing.JMenuItem mnuQuit;
    private javax.swing.JMenuItem mnuSecondASS;
    private javax.swing.JMenuItem mnuVideo;
    private javax.swing.JTable secondTable;
    private javax.swing.JSplitPane spAss;
    private javax.swing.JToggleButton tbItems;
    private javax.swing.JToggleButton tbNormal;
    private javax.swing.JToggleButton tbStripped;
    // End of variables declaration//GEN-END:variables
    
}
